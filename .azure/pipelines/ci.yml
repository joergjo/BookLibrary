trigger:
  branches:
    include:
    - master
  paths:
    include:
    - src
    - test

pr:
  branches:
    include:
    - master
  paths:
    include:
    - src
    - test

# To adopt this build pipeline to your environment, update the following
# variables:
# - azureServiceConnection: A reference to your AzureRM service connection
# - dockerRegistryServiceConnection: A reference to your registry
# - environment: Create an empty environment called 'default', as Deploy stages require it
# - imageRepository: The repository to push the image to
# - webAppName: The name of your web app
variables:
  azureServiceConnection: 'azure/vs'
  buildConfiguration: 'Release'
  buildContext: '.'
  dockerfilePath: 'src/BookLibrary/Dockerfile'
  dockerRegistryServiceConnection: 'dockerhub/joergjo'
  dotnetVersion: '3.1.x'
  environment: 'default'
  imageRepository: 'joergjo/booklibrary-netcore'
  tag: 'ci-$(Build.BuildId)'
  webAppName: 'joergjo-booklibrary'
  vmImageName: 'ubuntu-latest'

stages:
  - stage: Build
    jobs:
    - job: PR_Validation
      displayName: 'Pull Request Validation'
      condition: eq(variables['Build.Reason'], 'PullRequest')
      pool:
        vmImageName: $(vmImageName)
      steps:
      - task: UseDotNet@2
        displayName: 'Install latest .NET Core SDK'
        inputs:
          packageType: sdk
          version: $(dotnetVersion)
          installationPath: '$(Agent.ToolsDirectory)/dotnet'
      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          projects: |
            **/BookLibrary.Test.csproj
          arguments: '--configuration $(buildConfiguration)'
      - task: DotNetCoreCLI@2
        displayName: Test
        inputs:
          command: test
          projects: |
            **/BookLibrary.Test.csproj
          arguments: '--configuration $(buildConfiguration)'
    - job: Build_Container_Images
      displayName: 'Build container image'
      condition: in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual')
      pool:
        vmImageName: $(vmImageName)
      steps:
        - task: Docker@2
          displayName: 'Build and push image to container'
          inputs:
            command: buildAndPush
            repository: $(imageRepository)
            dockerfile: $(dockerfilePath)
            buildContext: $(buildContext)
            containerRegistry: $(dockerRegistryServiceConnection)
            tags: |
              $(tag)
              latest
  - stage: Deploy
    dependsOn: Build
    jobs:
      - deployment: DeployWebApp
        displayName: 'Deploy Web App on App Service'
        condition: in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual')
        pool:
          vmImageName: $(vmImageName)
        environment: $(environment)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebAppContainer@1
                  displayName: 'Azure Web App on Container Deploy: $(webAppName))'
                  inputs:
                    azureSubscription: $(azureServiceConnection)
                    appName: $(webAppName)
                    imageName: $(imageRepository)
