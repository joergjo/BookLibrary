trigger:
  paths:
    include:
    - src
    - test

pr:
  branches:
    include:
    - master
  paths:
    include:
    - src
    - test

# To adopt this build pipeline to your environment, update the following variables:
# - azureServiceConnection: Name of your AzureRM service connection
# - dockerRegistryServiceConnection: Name of your Docker registry service connection
# - environment: The name of the multi-stage pipeline environment to deploy to (this will be created automatically if it doesn't exist)
# - imageRepository: The repository to push the image to
# - webAppName: The name of your web app (i.e. "booklibrary" in "booklibrary.azurewebsites.net")
variables:
  azureServiceConnection: 'azure/vs'
  buildConfiguration: 'Release'
  buildContext: '.'
  dockerfilePath: 'src/BookLibrary/Dockerfile'
  dockerRegistryServiceConnection: 'dockerhub/joergjo'
  dotnetVersion: '3.1.x'
  environment: 'demo-site'
  imageRepository: 'joergjo/booklibrary-netcore'
  tag: 'ci-$(Build.BuildId)'
  webAppName: 'joergjo-booklibrary'
  vmImageName: 'ubuntu-latest'

stages:
  - stage: Build
    jobs:
    - job: Build
      displayName: 'Run dotnet build and test'
      pool:
        vmImageName: $(vmImageName)
      steps:
      - task: UseDotNet@2
        displayName: 'Install .NET Core SDK $(dotnetVersion)'
        inputs:
          packageType: sdk
          version: $(dotnetVersion)
          installationPath: '$(Agent.ToolsDirectory)/dotnet'

      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          projects: |
            **/BookLibrary.Test.csproj
          arguments: '--configuration $(buildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: Test
        inputs:
          command: test
          projects: |
            **/BookLibrary.Test.csproj
          arguments: '--configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage"'

      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage report'
        inputs:
          codeCoverageTool: 'cobertura'
          summaryFileLocation: '$(Agent.TempDirectory)/*/coverage.cobertura.xml'

      - task: Docker@2
        displayName: 'Build and push image to container registry'
        inputs:
          command: buildAndPush
          repository: $(imageRepository)
          dockerfile: $(dockerfilePath)
          buildContext: $(buildContext)
          containerRegistry: $(dockerRegistryServiceConnection)
          tags: |
            $(tag)
            latest
        condition: |
          and
          (
            in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'),
            eq(variables['Build.SourceBranchName'], 'master')
          )

  - stage: Deploy
    dependsOn: Build
    jobs:
      - deployment: Deploy
        displayName: 'Deploy container image on Azure App Service'
        condition: |
          and
          (
            in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'),
            eq(variables['Build.SourceBranchName'], 'master')
          )
        pool:
          vmImageName: $(vmImageName)
        environment: $(environment)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebAppContainer@1
                  displayName: 'Azure Web App on Container Deploy: $(webAppName))'
                  inputs:
                    azureSubscription: $(azureServiceConnection)
                    appName: $(webAppName)
                    imageName: $(imageRepository)
